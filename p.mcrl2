sort
  ATPSignal = struct BD | S4 | S6 | S8 | S13;
  ATPMode = struct Normal | Ringing | Ringed | Tolerating | Standby | Dead;

map vm: ATPSignal -> Nat;
    vu, dv: Nat;

eqn vm(S4) = 4; vm(S6) = 6; vm(S8) = 8; vm(S13) = 13;
    vu = 14; dv = 1;

act
  %% External       Internal
  timeout1,
  timeout2,
  beacon_stop,      s_beacon_stop, r_beacon_stop, sr_beacon_stop,
  bell,             s_bell, r_bell, sr_bell,
  ebrake,           s_ebrake, r_ebrake, sr_ebrake,
  reset,            s_reset_1, r_reset_1, sr_reset_1,
                    s_reset_2, r_reset_2, sr_reset_2,
                    s_atp_standby_1, r_atp_standby_1, sr_atp_standby_1,
                    s_atp_standby_2, r_atp_standby_2, sr_atp_standby_2,
                    s_atp_wakeup_1, r_atp_wakeup_1, sr_atp_wakeup_1,
                    s_atp_wakeup_2, r_atp_wakeup_2, sr_atp_wakeup_2,
                    s_done, r_done, sr_done,
  ertms_signal,
  ertms_standby;
  atp_mode: ATPMode;
  update,           s_update, r_update, sr_update: ATPSignal # Nat # Bool;

proc
  %% Generic ATP
  %% m may be Standby, Normal or Dead.
  G(v: Nat, i: Bool, m: ATPMode) =
    i -> (
      (m != Dead) -> ertms_signal . s_atp_standby_1 . G(v, false, Standby) +
      (v == 0 && m == Dead) -> reset . s_reset_1 . G(v, false, Standby) +
      (m == Normal) -> beacon_stop . s_beacon_stop . G(v, false, m) +
      sum s: ATPSignal .
        sum v: Nat . (v <= vu) ->
          sum b: Bool . update(s, v, b) . ertms_standby .
            ((s == BD) -> (s_atp_standby_1 . G(v, false, Standby)) <>
              (s_atp_wakeup_1 . s_update(s, v, b) . G(v, false, Normal)))) +
    r_ebrake . ebrake . G(v, i, Dead) +
    r_bell . bell . G(v, i, m) +
    r_done . G(v, true, m);

  %% ATP++
  %% m may be Dead, Normal, Tolerating, Ringing, Ringed or Standby.
  A(m: ATPMode) =
    (r_reset_1 + r_atp_standby_1) . ((m == Standby) -> s_done . A(m) <> ADM(Standby)) +
    r_atp_wakeup_1 . ((m == Standby) -> AM(Normal) <> A(m)) +
    (m == Dead) -> (
      sum s: ATPSignal . sum v: Nat . sum b: Bool .
        r_update(s, v, b) . s_done . A(m)) +
    (m == Normal) -> (
      sum s: ATPSignal . sum v: Nat . sum b: Bool . r_update(s, v, b) . (
        (!b && v > vm(s)) -> s_bell . ADM(Ringing) <>
        (b && v > vm(s) && v <= vm(s) + dv) ->
          s_bell . s_bell . s_bell . ADM(Tolerating) <>
        s_done . A(m))) +
    (m == Tolerating) -> (
      timeout2 . AM(Normal) +
      sum s: ATPSignal . sum v: Nat . sum b: Bool . r_update(s, v, b) . (
        (!b && v > vm(s) + dv) -> s_bell . ADM(Ringing) <>
        (v <= vm(s)) -> ADM(Normal) <>
        s_done . A(m))) +
    (m == Ringing) -> (
      timeout1 . A(Ringed) +
      sum s: ATPSignal . sum v: Nat . sum b: Bool . (
        r_update(s, v, b) . s_done . A(m))) +
    (m == Ringed) -> (
      sum s: ATPSignal . sum v: Nat . sum b: Bool . (
        r_update(s, v, b) . (
          (b -> ADM(Normal) <> (s_ebrake . ADM(Dead))))));

  AM(m: ATPMode) = atp_mode(m) . A(m);

  ADM(m: ATPMode) = atp_mode(m) . s_done . A(m);

  %% Beacon Stopper
  B =
    r_beacon_stop . s_ebrake . s_done . B;

init
  hide(
    {
      sr_beacon_stop,
      sr_bell,
      sr_ebrake,
      sr_reset_1,
      sr_reset_2,
      sr_atp_wakeup_1,
      sr_atp_wakeup_2,
      sr_atp_standby_1,
      sr_atp_standby_2,
      sr_done,
      sr_update
%      s_update
    },
    allow(
      {
        timeout1,
        timeout2,
        beacon_stop,
        bell,
        ebrake,
        reset,
        ertms_signal,
        ertms_standby,
        atp_mode,
        update,

        sr_beacon_stop,
        sr_bell,
        sr_ebrake,
        sr_reset_1,
        sr_reset_2,
        sr_atp_wakeup_1,
        sr_atp_wakeup_2,
        sr_atp_standby_1,
        sr_atp_standby_2,
        sr_done,
        sr_update
      },
      comm(
        {
          s_beacon_stop|r_beacon_stop -> sr_beacon_stop,
          s_bell|r_bell -> sr_bell,
          s_ebrake|r_ebrake -> sr_ebrake,
          s_reset_1|r_reset_1 -> sr_reset_1,
          s_reset_2|r_reset_2 -> sr_reset_2,
          s_atp_wakeup_1|r_atp_wakeup_1 -> sr_atp_wakeup_1,
          s_atp_wakeup_2|r_atp_wakeup_2 -> sr_atp_wakeup_2,
          s_atp_standby_1|r_atp_standby_1 -> sr_atp_standby_1,
          s_atp_standby_2|r_atp_standby_2 -> sr_atp_standby_2,
          s_done|r_done -> sr_done,
          s_update|r_update -> sr_update
        },
        G(0, true, Standby) || A(Standby) || B
  )));
